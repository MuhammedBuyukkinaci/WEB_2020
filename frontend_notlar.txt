HTML:
1) html etiketi body ve head etiketlerinden oluşur.
2) head altındaki meta etiketleri arama motorları açısından önemlidir.
3) <!DOCTYPE html> ise HTML5 olduğuna işaret eder.
4) h1'den h6'ya kadar başlık etiketi var. h1'den h6'ya doğru büyüklük ve önem azalıyor.
5) SEO kriterlerine göre, h1'den 1 html dosyasında 1 tane, h2'den ise 4 tane olması idealdir.
6) Etiket kullanmanın avantajını, css işlemi uygularken görüyoruz. Etiketsiz yazıya css operasyonu yapılmıyor.
7) b ve strong etiketi aynıdır(kalın). i ile em etiketi aynıdır(italik). u ile ins etiketi (altı çizili) aynıdır. del üstü çizilmiş yazı için kullanılan etikettir.
8) <hr> ise yatay çizgi çekmek için kullanılır.
9) mark etiketi ise sarı arka plan yapmak için kullanılır.
10) ul ve ol list oluşturmak için kullanılan etiketlerdir. li element'i temsiz eder.
11) img etiketinin alt attribute'ü resim olmadığında yazan yazıdır.
12) a etiketi inline bir etikettir, p etiketi ise inline değildir yeni satıra geçer.
13) Arama motorları anlamsal etiketleri (semantik elements) severler.
14) <a href="img/mbk.jpg" target="_blank"> etiketi ile, target = "_blank" başk bir sekmede açılsın anlamına gelir.

CSS:
1) 3 çeşit css kodu yazma türü imkanı var: Inline, Internal ve External.
2) Id'deki kod class'ı ezer, class'taki da tag'dekini ezer. Id'de tanımlanmış bir css kodundaki şey gerçekleşmiş olur.
3)Gruop Selectors için bazı notlar:
<!-- Notes on Group Selectors -->
<!-- * -> all etiketleri -->
<!-- p -> tüm p etiketleri  -->
<!-- div p -> div içindeki tüm p etiketleri -->
<!-- div,p -> tüm div ve p etiketleri-->
<!-- div > p -> üst etiketi div olan tüm p etiketleri -->
<!-- p ~ div -> p ile aynı seviyede tüm div -->
<!-- p + div -> p etiketinden sonra div -->
4)Attribute Selectors, örneğin p tag'inde title'ı title1 olanlara css işlemi uygulamak için şöyle bir css kodu yazıyoruz. Attribute selector'ları genelde formlar için kullanılır.

p[title="title1"]{
    border: 3px solid blue;
    background-color: brown;
}

multiple filters for Attribute Selectors
p[title="title1"][lang="13"]{
    border: 3px solid blue;
    background-color: brown;
}

5) Pseudo Selectors
6) Bir tag'in üzerine gelindiğinde aşağıdaki olaylar gerçekleşebilir: link, visited, hover, active
7) div in overflow diye bir attribute'ü var. Bu attribute bize div'in taşması durumunda ne yapılabilceğini söylüyor. overflow:visible yapılırsa, taşan kısım gösterilir html üzerinde.
8) div'in display diye bir özelliği var, bu özellik, none, inline, block, inline-block değerleri alabiliyor. div default olarak block'tur, yani satırı olduğu gibi kaplar. JS ile beraber daha çok kullanılan bir özellik.
9) a'nın ve span'ın display özellği ise inline'dır. Inline elemanlara yükseklik vermek için display'i block'a çevirilmeli ve sonra yüksekliği değiştirilmeli.
10) position'ın alabilceği 5 farklı değer var: static, relative, fixed, absolute, sticky. Default'u static'tir. Eğer ki bir div'in sabit olarak sürekli browser'da görünmesini istiyorsak, position'ı fixed yapmalıyız. Sticky ise menü hazırlarken kullanılabilir.
11) margin, border ve paddingi le 2 farklı model yapısı kullanılabilir. content model: box-sizing: content-box olan modellerdir, bu modellerde padding ve border'ın genişlikleri, width'in üzerine eklenir. , box model: box-sizing: border-box olan modellerdir, bu modellerde padding ve border'ın genişlikleri, width'in içindedir.
12) Tag'i yatay olarak center etmek için, margin: auto kullanılmalı.
13) Bir web uygulamasını en son test ederken, sadece chrome'da değil, safari ve firefox'da da test etmeliyiz.
14) Google Fonts'u, font tipi seçerken kullanabiliriz.
15) box-shadow, bir tag'in(p veya div vs.) arkasında gölge çıkmasını sağlayan bir css özelliğidir. box-shadow kullanılırken "-webkit-box-shadow: 10px 10px;" ve "-moz-box-shadow: 10px 10px;" gibi css olarak kodlanmalıdır.Box shadow ve hover beraber kullanılabilir.
16)Bir butonun üzerine geldikten birkaç saniye sonra değişmesi, transition olayı olarak ifade edilir. -webkit ve -moz özellikleri de tüm tarayıcılarda sorunsuz çalışması için yapıyoruz. transition içinde, transition-timing-function diye bir parametre var, bu parametre ease, linear, ease-in, ease-out, ease-in-out olabiliyor. Bize transition'ın hızını ayarlamaya imkan sağlıyor.
17)css içine aşağıdaki gibi bir kod yazarak, padding ve margin değerlerini 0'layabiliriz.
*{
    box-sizing: border-box;
    padding: 0px;
    margin: 0px;
}
18) cursor: pointer ile mouse'un ucunu el yapabiliyoruz hover olayında.
19) img içine "object-fit: cover" css kodunu verirsek, resmin boyutları korunuyor ama bazı kısımları kesiliyor. object fit; cover gibi contain, fill(default), none değerleri de alabilir.
20) Tarayıcının görünen alanına ViewPort denir.
21) linear-gradient ile background-image'daki renklerin farklılaşmasını sağlarız.
22) "text-align: center;" ile yazı ortalanabilir.
@media screen and (max-width: 400px){
h1{
font-size: 12px;
}
body{
background-color: green;
}
}
24) background image ayarlarken, "z-index: -1" kodu ile resmi yazının arkasına koyabiliriz.
25) Genişliği tam verip, yüksekliği de ona göre ayarlamak için aşağıdaki gibi bir css kodu gerekir
img{
    width: 100%;
    height: auto;
}
26)Bir etiketten önce veya sonra bir şey eklemek için css olarak ::after veya ::before demeliyiz.
27) Resmin üzerine gelen tabakaya overlay deniyor.
28) Responsive tasarım media query'lerinde, max-width gibi şu pixel'in üzerine çıkarsa bunu yap gibi bir şey kodlarsak, breakpointler tanımlamış oluruz.
29) Transpiler(Sass compiler) ile yazdığımız Sass kodunu css'e çeviriyoruz. Sass ve scss bizim hızlı css kodu yazmamızı sağlıyor. Sass ve scss yapıları birbirlerine çok benzer, syntax'te farklılıklar var. Scss kullanmak, normal css syntax'ine daha yakın olduğu için scss kullanıyoruz. scss'te değişken tanımlayabiliyoruz ve bu değişkenleri css kodunda kullanabiliyoruz. Ayrıca, scss ile nesting mixin extend gibi özellikler de mevcut.
30) SCSS: Scss variable tanımlama aşağıdaki gibidir:
$color_used: #6c757d
nav {
color: $color_used
}
31) SCSS: nesting işlemi de aşağıdaki gibidir.

.navigation{
	list-style: nones
	li {
	display: inline-block;
	margin-left: 20px;

		&:first-child{
			margin:0
		}	
		a{
		text-decoration:none;
		text-transform: uppercase;
		color: #fff;

			&: hover{
			color: blue;
			}		
		}
	}
}

32) SCSS: mixin ile belli bir parça css kodunu, birden fazla id veya class için kullanabiliriz.

@mixin box($used_color , $height_used){
	color: $used_color;
	margin:15px;
	width: 100px;
	height: $height_used;
}

#first{
@include box(red,200px);
}

#second{
@include box(green,50px);
}

#third{
@include box(blue,150px);
}

33) SCSS: extend ile birleştirilen özellikleri ayrı bir sınıfla virgül ile ayrıştırarak oluşturuyor. extend ile yazdığımızda, tekrar etmeden kod yazmış oluyoruz. mixin'de tekrar ile kod yazmış oluyoruz.


$width-button: 200px;
$color-primary: blue;

%btn-placeholder{
	padding:10px;
	display: inline-block;
	width: $width-button;
}

.btn-login, .btn-signup{
	&: link{
		@extend %btn-placeholder;
		background-color $color-primary: 
		}
}

34) Bootstrap kütüphanesi SCSS ile yazılmıştır. base.scss ve layout.scss dosyaları, style.scss içinde import edilmiştir. Autocompile edilen style.scss dosyası ise css altındaki style.css dosyasına dönüşmüştür.
