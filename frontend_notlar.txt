HTML:
1) html etiketi body ve head etiketlerinden oluşur.
2) head altındaki meta etiketleri arama motorları açısından önemlidir.
3) <!DOCTYPE html> ise HTML5 olduğuna işaret eder.
4) h1'den h6'ya kadar başlık etiketi var. h1'den h6'ya doğru büyüklük ve önem azalıyor.
5) SEO kriterlerine göre, h1'den 1 html dosyasında 1 tane, h2'den ise 4 tane olması idealdir.
6) Etiket kullanmanın avantajını, css işlemi uygularken görüyoruz. Etiketsiz yazıya css operasyonu yapılmıyor.
7) b ve strong etiketi aynıdır(kalın). i ile em etiketi aynıdır(italik). u ile ins etiketi (altı çizili) aynıdır. del üstü çizilmiş yazı için kullanılan etikettir.
8) <hr> ise yatay çizgi çekmek için kullanılır.
9) mark etiketi ise sarı arka plan yapmak için kullanılır.
10) ul ve ol list oluşturmak için kullanılan etiketlerdir. li element'i temsiz eder.
11) img etiketinin alt attribute'ü resim olmadığında yazan yazıdır.
12) a etiketi inline bir etikettir, p etiketi ise inline değildir yeni satıra geçer.
13) Arama motorları anlamsal etiketleri (semantik elements) severler.
14) <a href="img/mbk.jpg" target="_blank"> etiketi ile, target = "_blank" başk bir sekmede açılsın anlamına gelir.

CSS:
1) 3 çeşit css kodu yazma türü imkanı var: Inline, Internal ve External.
2) Id'deki kod class'ı ezer, class'taki da tag'dekini ezer. Id'de tanımlanmış bir css kodundaki şey gerçekleşmiş olur.
3)Gruop Selectors için bazı notlar:
<!-- Notes on Group Selectors -->
<!-- * -> all etiketleri -->
<!-- p -> tüm p etiketleri  -->
<!-- div p -> div içindeki tüm p etiketleri -->
<!-- div,p -> tüm div ve p etiketleri-->
<!-- div > p -> üst etiketi div olan tüm p etiketleri -->
<!-- p ~ div -> p ile aynı seviyede tüm div -->
<!-- p + div -> p etiketinden sonra div -->
4)Attribute Selectors, örneğin p tag'inde title'ı title1 olanlara css işlemi uygulamak için şöyle bir css kodu yazıyoruz. Attribute selector'ları genelde formlar için kullanılır.

p[title="title1"]{
    border: 3px solid blue;
    background-color: brown;
}

multiple filters for Attribute Selectors
p[title="title1"][lang="13"]{
    border: 3px solid blue;
    background-color: brown;
}

5) Pseudo Selectors
6) Bir tag'in üzerine gelindiğinde aşağıdaki olaylar gerçekleşebilir: link, visited, hover, active
7) div in overflow diye bir attribute'ü var. Bu attribute bize div'in taşması durumunda ne yapılabilceğini söylüyor. overflow:visible yapılırsa, taşan kısım gösterilir html üzerinde.
8) div'in display diye bir özelliği var, bu özellik, none, inline, block, inline-block değerleri alabiliyor. div default olarak block'tur, yani satırı olduğu gibi kaplar. JS ile beraber daha çok kullanılan bir özellik.
9) a'nın ve span'ın display özellği ise inline'dır. Inline elemanlara yükseklik vermek için display'i block'a çevirilmeli ve sonra yüksekliği değiştirilmeli.
10) position'ın alabilceği 5 farklı değer var: static, relative, fixed, absolute, sticky. Default'u static'tir. Eğer ki bir div'in sabit olarak sürekli browser'da görünmesini istiyorsak, position'ı fixed yapmalıyız. Sticky ise menü hazırlarken kullanılabilir.
11) margin, border ve paddingi le 2 farklı model yapısı kullanılabilir. content model: box-sizing: content-box olan modellerdir, bu modellerde padding ve border'ın genişlikleri, width'in üzerine eklenir. , box model: box-sizing: border-box olan modellerdir, bu modellerde padding ve border'ın genişlikleri, width'in içindedir.
12) Tag'i yatay olarak center etmek için, margin: auto kullanılmalı.
13) Bir web uygulamasını en son test ederken, sadece chrome'da değil, safari ve firefox'da da test etmeliyiz.
14) Google Fonts'u, font tipi seçerken kullanabiliriz.
15) box-shadow, bir tag'in(p veya div vs.) arkasında gölge çıkmasını sağlayan bir css özelliğidir. box-shadow kullanılırken "-webkit-box-shadow: 10px 10px;" ve "-moz-box-shadow: 10px 10px;" gibi css olarak kodlanmalıdır.Box shadow ve hover beraber kullanılabilir.
16)Bir butonun üzerine geldikten birkaç saniye sonra değişmesi, transition olayı olarak ifade edilir. -webkit ve -moz özellikleri de tüm tarayıcılarda sorunsuz çalışması için yapıyoruz. transition içinde, transition-timing-function diye bir parametre var, bu parametre ease, linear, ease-in, ease-out, ease-in-out olabiliyor. Bize transition'ın hızını ayarlamaya imkan sağlıyor.
17)css içine aşağıdaki gibi bir kod yazarak, padding ve margin değerlerini 0'layabiliriz.
*{
    box-sizing: border-box;
    padding: 0px;
    margin: 0px;
}
18) cursor: pointer ile mouse'un ucunu el yapabiliyoruz hover olayında.
19) img içine "object-fit: cover" css kodunu verirsek, resmin boyutları korunuyor ama bazı kısımları kesiliyor. object fit; cover gibi contain, fill(default), none değerleri de alabilir.
20) Tarayıcının görünen alanına ViewPort denir.
21) linear-gradient ile background-image'daki renklerin farklılaşmasını sağlarız.
22) "text-align: center;" ile yazı ortalanabilir.
@media screen and (max-width: 400px){
h1{
font-size: 12px;
}
body{
background-color: green;
}
}
24) background image ayarlarken, "z-index: -1" kodu ile resmi yazının arkasına koyabiliriz.
25) Genişliği tam verip, yüksekliği de ona göre ayarlamak için aşağıdaki gibi bir css kodu gerekir
img{
    width: 100%;
    height: auto;
}
26)Bir etiketten önce veya sonra bir şey eklemek için css olarak ::after veya ::before demeliyiz.
27) Resmin üzerine gelen tabakaya overlay deniyor.
28) Responsive tasarım media query'lerinde, max-width gibi şu pixel'in üzerine çıkarsa bunu yap gibi bir şey kodlarsak, breakpointler tanımlamış oluruz.
29) Transpiler(Sass compiler) ile yazdığımız Sass kodunu css'e çeviriyoruz. Sass ve scss bizim hızlı css kodu yazmamızı sağlıyor. Sass ve scss yapıları birbirlerine çok benzer, syntax'te farklılıklar var. Scss kullanmak, normal css syntax'ine daha yakın olduğu için scss kullanıyoruz. scss'te değişken tanımlayabiliyoruz ve bu değişkenleri css kodunda kullanabiliyoruz. Ayrıca, scss ile nesting mixin extend gibi özellikler de mevcut.
30) SCSS: Scss variable tanımlama aşağıdaki gibidir:
$color_used: #6c757d
nav {
color: $color_used
}
31) SCSS: nesting işlemi de aşağıdaki gibidir.

.navigation{
	list-style: nones
	li {
	display: inline-block;
	margin-left: 20px;

		&:first-child{
			margin:0
		}	
		a{
		text-decoration:none;
		text-transform: uppercase;
		color: #fff;

			&: hover{
			color: blue;
			}		
		}
	}
}

32) SCSS: mixin ile belli bir parça css kodunu, birden fazla id veya class için kullanabiliriz.

@mixin box($used_color , $height_used){
	color: $used_color;
	margin:15px;
	width: 100px;
	height: $height_used;
}

#first{
@include box(red,200px);
}

#second{
@include box(green,50px);
}

#third{
@include box(blue,150px);
}

33) SCSS: extend ile birleştirilen özellikleri ayrı bir sınıfla virgül ile ayrıştırarak oluşturuyor. extend ile yazdığımızda, tekrar etmeden kod yazmış oluyoruz. mixin'de tekrar ile kod yazmış oluyoruz.


$width-button: 200px;
$color-primary: blue;

%btn-placeholder{
	padding:10px;
	display: inline-block;
	width: $width-button;
}

.btn-login, .btn-signup{
	&: link{
		@extend %btn-placeholder;
		background-color $color-primary: 
		}
}

34) Bootstrap kütüphanesi SCSS ile yazılmıştır. base.scss ve layout.scss dosyaları, style.scss içinde import edilmiştir. Autocompile edilen style.scss dosyası ise css altındaki style.css dosyasına dönüşmüştür.
35) Flexbox için, display: flex yapmak gerekiyor.
36) Flexbox, flex container ve flex item'lardan oluşan bir yapıdır. Flex container; flex-direction, flex-wrap, justify-content, align-items ve align-content attribute'larını içermektedir. Flex item ise align-self, order, flex-grow, flex-shrink ve flex-basis özelliklerini içermektedir.
37) Aşağıdaki css kodu ile bir div'i, içinde bulunduğu div'e tam olarak ortalayabiliriz:

display: flex;
align-items: center;
justify-content: center;

38) Yukarıdakine bir muadili, yani bir div'i içinde bulunduğu div içinde ortalamak için , de margin ile yazılabilen kod parçasıdır.

margin: auto;

BOOTSTRAP:

1) Bootstrap'i kullanmak için, head kısmına aşağıdaki gibi bir kod eklenmeli.
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css"
        integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">

2) Bootstrap'i kullanmak için, body içine(body'nin en altına) aşağıdaki gibi bir kod eklenmeli.

<script src="https://code.jquery.com/jquery-3.5.1.min.js"
        integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous">
    </script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"
        integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous">
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.min.js"
        integrity="sha384-w1Q4orYjBQndcko6MimVbzY0tgp4pWB4lZ7lr30WKz0vr/aWKhXdBNmNb5D92v7s" crossorigin="anonymous">
    </script>

3) Silik bir yazı oluşturmak için BS'e ait text-muted class'ı kullanılmalıdır. Öne çıkan bir yazı oluşturmak için ise lead class'ı kullanılabilir.

4) Button oluşturmak için button isimli bir tag açıp içine btn class'ı yazıyoruz

5) Margin, bootstrap'te 0,1,2,3,4,5 gibi değerler alır. Örneğin m-1, m-3 gibi. Margin right için mr, lmargin left için ml, margin-top için mt, margin bottom için mb. Örneğin mb-2, mt-3, ml-4, mr-5 gibi.
Margin-bottom ve margin-top beraber kullanmak için my, margin-right ve margin-left'i beraber kullanmak için mx kullanılır.

<div class = "mt-3 mr-4"> 
	Our text
</div>

6) Padding, bootstrap'te 0,1,2,3,4,5 gibi değerler alır. Örneğin p-1, p-3 gibi. Margin right için mr, lmargin left için ml, margin-top için mt, margin bottom için mb. Örneğin pb-2, pt-3, pl-4, pr-5 gibi.
Padding-bottom ve Padding-top beraber kullanmak için py, Padding-right ve Padding-left'i beraber kullanmak için px kullanılır.

<div class = "pt-3 pr-4"> 
	Our text
</div>

7) Border eklemek için border class'ı kullanılmalıdır. Border'a renk vermek için ise border-primary gibi bir class yazılmalıdır.

8) w-25, w-50 gibi class'lar ile satırın genişliğinin(width) yüzde kaçının kaplanması gerektiğini öğreniyoruz. Aynısını yükseklik(height) için de h-25, h-50 gibi class'lar ile yapabiliriz.

9) Bir div'i gölgelendirmek için ise shadow, shadow-sm, shadow-lg gibi class'lar kullanabiliriz.

10) bir etiket içinde yazıyı hizalamak için, text-justify, text-left, text-right, text-center gibi BS class'ları kullanabiliriz

11) Blockquote ile veciz bir söz paylaşıyormuşuz gibi yapabiliriz.

12) Inline bir etiketi block etiketi yapmak için d-block, block bir etiketi inline bir etiket yapmak için ise d-inline class'ı kullanılmalıdır. d-none ile de display'ini none yapabiliyoruz.

13) Tabloyu BS ile kullanabilmek için, tablonun class'ına table yazmalıyız. table-dark class'ı verirsek tablonun arka planına karanlık olur. table-stripped ile ardışık satırları farklılaştırıyoruz. table-bordered ile border ekleyebiliyoruz. table-ghover ile hover olayını etkin kılıyoruz. table-sm ile tabloyu küçültebiliyoruz. table-danger, table-primary ile thead veya table'a renk verebiliyoruz. Tabloda çok kolon olması durumunda, tabloyu class'ı table-responsive olan bir div içine alıyoruz.

14) Liste elemanı oluşturmak için, ul'ye list-group class'ı verilebilir. list-group-item da li elemanlarına verilebilir. list-group-item-action ile hover olayı olan bir li elemanı oluşturabiliyoruz.

15) Sayfada kaybolan kuyu yapmak için Jquery 'ni minified versiyonu html içinde olduğunda, aşağıdaki gibi bir kod gerekir.

<div class="alert alert-success mb-3 alert-dismissable fade show">
        Lorem ipsum dolor sit amet.
        <button class="close" type="button" data-dismiss="alert">
            <span>&times;</span>
        </button>
    </div>

16) Sayfayı ortalamak için ve sağ ile solda eşit boşluk bırakmak için w-75 mx-auto class'larını body içine vermeliyiz.

17) Bir foto ve yanımda resim olacak şekilde bir media objesini aşağıdaki kod ile oluşturabiliriz.

<div class="media mt-5">
	<img class="mr-3" src="img/mbk.jpg" alt="">

	<div class="media-body">
	<h5>Lorem, ipsum dolor.</h5>
	<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Esse nulla iure quibusdam veniam dignissimos pariatur, reiciendis ipsum, expedita ratione ut quod quas sequi debitis at voluptate suscipit tempore. Rem, ad?</p>
</div>

18) img tag'lerine, img-fluid class'ı verilebilir. Böylece, eğer ki resim küçük bir tarayıcıda açılırsa, resim orantısal biçimde küçülür. Eğer ki resmin boyutundan daha büyük bir ebatta açılırsa da büyümez.

19) BS'de default olarak clearfix class'ı var. Image'lera verildiğinde, img etiketinden sonraki tag yeni satırdan başlar.

20) Resmi sağa veya sola götürmek için direkt olarak float-right veya float-left class'ları kullanılabilir.

21) BS içinde en çok kullanılan yapılardan birisi card yapısıdır.

22) BS içinde responsive bir class olan container var. container class'ı, media query'lere göre boyutu ayarlayan bir class. Çokça kullanılır. container-fluid tüm satırı kaplarken, container satırın yüzde 75'ini kaplıyor.

23) jumbotron class'ı ile arka plan verebiliyoruz.

24) Navbar'a fixed-top class'ı vererek, scroll down olma durumunda navbar'ı yukarıya fixlemiş oluyoruz.

25) Bir tag'i bir tuşa bastığımızda gizlemek ve aynı tuşa bastığımızda tekrardan göstermek için BS'in collapse özelliği kullanılabilir.

26) Accordion, BS'e ait çok önemli bir özelliktir. Accordion ile, toggle olayını kullanarak yazıları saklayabiliyoruz.

27)Carousel ile resimleri kayan şekilde oluşturabiliyoruz.

28)Modal, BS'e ait önemli bir özelliktir. Modal ile, bir butona tıkladığımızda, mevcut html dosyası içinde yeni bir yazı pop up etmesini sağlayabiliyoruz. Butona tıklandığında, login olma işlemi yapılabiir böylece.

29) Tooltip özelliği ile, bir tag'in üzerine geldiğimizde(hover)  sağda veya solda veya yukarıda veya aşağıda bir yazı çımasını sağlayabiliriz.

30) Scrollspy ile tek sayfalık web uygulamaları yapabiliyoruz. Böylece, kullanıcı hangi sayfada olduğunu navbar üzerinden görebiliyor.

31) Popover, tooltip'e çok benziyor. Tooltip ile yapabildiklerimizi, popover ile de yapabiliriz.

32) BS'te responsive özeliği vardır.

33) BS, toplam 12 kolon varmış gibi html sayfasını düşünür.

34) Farklı çözünürlüklerde, genişliği col-sm-4, col-md-6 gibi class'lar ile div'lere verebiliyoruz. col-md-6 şöyle demek: medium ve üzeri size'da, satırın yarısını (6/12) kapla. small ve extra small'da ise hepsini kapla

35) Navbar'da navbar-expand-sm responsive yaparken önemlidir.

36)Jumbotron, header semantik tag'i içine alınabilir.

JavaScript:

1) VSCode için, ES6 javascript ve live server eklentileri kurulmalıdır.

2) JS'te, tek satırlık yorumları // ile, çok satırlı yorumları da /* COMMENT_HERE */ ile oluşturabiliriz.

3) Aşağıdaki satır gibi bir satırı, html koduna gömerek, external bir JS dosyası ile HTML dosyasını ilişkilendirebiliriz.

<script src="script.js" type="text/Javascript"></script>

4) JS ile, HTML sayfasındaki elemanlara müdahele edip değişiklik yapabiliriz.

5) Data type'leri, 2 ana grupta toplayabiliriz: Primitive: String, number, null, undefined, boolean Objects: Array, object, function

6) boolean veya number'ı string yapmak için String fonksiyonu kullanılabilir. String'i number yapmak için de Number fonksiyonu kullanılmalıdır. Null'ı number'a çevirmeye kalarkarsak, 0 sonucu verir. parseInt ile bir float değ

7) bir string'in uzunluğu aşağıdaki kod ile bulunabilir:

var a = 'Abc'

console.log(a.length);

8) parseInt methodu, '10a' stringini 10 sayısına çevirebilirken 'a10a' string'ini 10 sayısına çevirememektedir. Bir string'in numerik bir değere çevirip çevrilmeyeceğini isNaN methodu ile öğrenebiliriz.

9) Matematik ile ilgili fonksiyonlara Math. ile ulaşabiliriz. Örneğin PI, e sayılarına ve log alma,min alma, max alma işlemlerine. Math.random() le 0 ile 1 arasında random bir sayı üretebiliriz. Örneğin web sayfasında rastgele bir resim gönderirken, bu JS fonksiyonunu kullanabiliriz.

10) String ifade ile numerik ifadeler + operatörü ile birleştirilebilir.

var a = 'a';
var b = 'b';
var c = 35;
consoloe.log(a + b + c);

11) String'in x'inci elemanını bulamk için string[x] yazabiliriz. String'in başındaki ve sonundaki boşluk karakterinden kurtulmak için trim methodu kullanılabilir.

12) Bir string'in içindeki tüm aynı pattern'i değiştirmek için aşağıdaki gibi bir kod kullanılır.

var string = "elma armut kiraz elma nar";
console.log(string.replace(/elma/g,'karpuz'));

13) Javasctipt'teki template literals işlemi, python'daki f string'e benzemektedir.

14) Dizinin elemanları, python'daki list gibi farklı türler alabilir.

15) iki diziyi birleştirmek için concat methodu kullanılır.

var list_merged = list1.concat(list2)

16) Bir list'in içerisindeki belli bir kısım elemanları bir koşula göre filtrelemek için filter methodu kullanılabilir.

//over18 methodu true dönenleri filter ediyor
let filtered = list_used.filter(over18);

17) and ve or'u sırasıyla && ve || ile elde edebiliriz.

18) Aşağıdaki gibi bir kod ile, browser'da bir uyarının pop up etmesini sağlayabiliriz. prompt ile, browser üzerinde kullanıcının bir şey girmesini sağlayabiliriz.

var val = prompt("who is there?");

19) JS'teki object literal kavramı, python'daki dict kavramına karşılık gelmektedir. Bir object lietral, aşağıdaki gibi oluşturulabilir.

let person= {
    firstname: 'cinar',
    lastname: 'cinar2'    
}

20) JS'teki this ile python'daki self benzerdir.
console.log(val);

21) DB'den gelen bilgiler, bize object literal formatında geliyor.


